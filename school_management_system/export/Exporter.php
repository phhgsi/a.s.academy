<?php
/**
 * Export Service Class
 * School Management System
 * 
 * Provides standardized export functionality for CSV and PDF formats
 * with proper error handling and file delivery.
 */

class Exporter {
    
    /**
     * Export data to CSV format
     * 
     * @param string $filename Base filename (without extension)
     * @param array $headers Array of column headers
     * @param array $data Array of data rows (each row is an array)
     * @param string $title Optional title for the CSV file
     */
    public static function csv($filename, $headers, $data, $title = '') {
        try {
            // Generate unique filename with timestamp
            $timestamp = date('Y-m-d_H-i-s');
            $csv_filename = $filename . '_' . $timestamp . '.csv';
            
            // Set headers for CSV download
            header('Content-Type: text/csv; charset=utf-8');
            header('Content-Disposition: attachment; filename="' . $csv_filename . '"');
            header('Cache-Control: no-cache, must-revalidate');
            header('Expires: 0');
            
            // Open output stream
            $output = fopen('php://output', 'w');
            
            // Add UTF-8 BOM for proper Excel encoding
            fprintf($output, chr(0xEF).chr(0xBB).chr(0xBF));
            
            // Add title row if provided
            if ($title) {
                fputcsv($output, [$title]);
                fputcsv($output, []); // Empty row
            }
            
            // Add generated info
            fputcsv($output, ['Generated on: ' . date('d/m/Y H:i:s')]);
            fputcsv($output, ['Generated by: ' . ($_SESSION['user_name'] ?? 'System')]);
            fputcsv($output, []); // Empty row
            
            // Add headers
            fputcsv($output, $headers);
            
            // Add data rows
            foreach ($data as $row) {
                fputcsv($output, $row);
            }
            
            fclose($output);
            exit();
            
        } catch (Exception $e) {
            http_response_code(500);
            header('Content-Type: application/json');
            echo json_encode(['error' => 'Export failed: ' . $e->getMessage()]);
            exit();
        }
    }
    
    /**
     * Export data to PDF format (HTML to PDF conversion)
     * 
     * @param string $filename Base filename (without extension)
     * @param string $html HTML content to convert to PDF
     * @param string $orientation 'portrait' or 'landscape'
     */
    public static function pdf($filename, $html, $orientation = 'portrait') {
        try {
            // Check if dompdf is available
            if (!class_exists('Dompdf\Dompdf')) {
                // Simple HTML to PDF fallback using browser print
                self::htmlToPdf($filename, $html);
                return;
            }
            
            require_once '../vendor/autoload.php';
            
            $dompdf = new \Dompdf\Dompdf();
            $dompdf->loadHtml($html);
            $dompdf->setPaper('A4', $orientation);
            $dompdf->render();
            
            // Generate unique filename with timestamp
            $timestamp = date('Y-m-d_H-i-s');
            $pdf_filename = $filename . '_' . $timestamp . '.pdf';
            
            // Output PDF
            $dompdf->stream($pdf_filename, ['Attachment' => true]);
            
        } catch (Exception $e) {
            // Fallback to simple HTML download
            self::htmlToPdf($filename, $html);
        }
    }
    
    /**
     * Fallback HTML to PDF using browser printing
     * 
     * @param string $filename
     * @param string $html
     */
    private static function htmlToPdf($filename, $html) {
        $timestamp = date('Y-m-d_H-i-s');
        $html_filename = $filename . '_' . $timestamp . '.html';
        
        header('Content-Type: text/html; charset=utf-8');
        header('Content-Disposition: attachment; filename="' . $html_filename . '"');
        header('Cache-Control: no-cache, must-revalidate');
        
        // Add print styles directly to HTML
        $print_styles = '
        <style>
            @media print {
                body { margin: 0; padding: 20px; font-family: Arial, sans-serif; }
                .no-print { display: none !important; }
                table { border-collapse: collapse; width: 100%; }
                th, td { border: 1px solid #000; padding: 8px; }
                th { background: #f0f0f0; font-weight: bold; }
            }
            @page { margin: 20mm; }
        </style>
        <script>
            window.onload = function() {
                setTimeout(function() { window.print(); }, 500);
            };
        </script>';
        
        echo str_replace('</head>', $print_styles . '</head>', $html);
        exit();
    }
    
    /**
     * Generate HTML table from data array
     * 
     * @param array $headers
     * @param array $data
     * @param string $table_class
     * @return string
     */
    public static function generateHtmlTable($headers, $data, $table_class = 'table') {
        $html = '<table class="' . $table_class . '">';
        
        // Add headers
        $html .= '<thead><tr>';
        foreach ($headers as $header) {
            $html .= '<th>' . htmlspecialchars($header) . '</th>';
        }
        $html .= '</tr></thead>';
        
        // Add data rows
        $html .= '<tbody>';
        foreach ($data as $row) {
            $html .= '<tr>';
            foreach ($row as $cell) {
                $html .= '<td>' . htmlspecialchars($cell) . '</td>';
            }
            $html .= '</tr>';
        }
        $html .= '</tbody></table>';
        
        return $html;
    }
    
    /**
     * Create complete HTML document for PDF export
     * 
     * @param string $title Document title
     * @param string $content Main content HTML
     * @param string $report_title Report title for header
     * @return string Complete HTML document
     */
    public static function createHtmlDocument($title, $content, $report_title = '') {
        return '<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>' . htmlspecialchars($title) . '</title>
    <link rel="stylesheet" href="../assets/css/print.css" media="print">
    <style>
        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; }
        .print-content { max-width: 100%; }
    </style>
</head>
<body>
    <div class="print-content">
        ' . self::generatePrintHeader($report_title ?: $title) . '
        <main class="print-body">
            ' . $content . '
        </main>
        ' . self::generatePrintFooter() . '
    </div>
</body>
</html>';
    }
    
    /**
     * Generate print header HTML
     */
    private static function generatePrintHeader($report_title) {
        global $pdo;
        
        // Get school info
        try {
            $stmt = $pdo->prepare("SELECT * FROM school_info WHERE id = 1");
            $stmt->execute();
            $school_info = $stmt->fetch();
        } catch (Exception $e) {
            $school_info = null;
        }
        
        $school_name = $school_info['school_name'] ?? 'A.S.ACADEMY';
        $school_address = $school_info['address'] ?? 'LAHAR ROAD UMARI BHIND MADHYA PRADESH (477331)';
        
        return '<div class="print-header">
            <h1 class="school-name">' . htmlspecialchars($school_name) . '</h1>
            <p class="school-address">' . htmlspecialchars($school_address) . '</p>
            <h2 class="report-title">' . htmlspecialchars($report_title) . '</h2>
        </div>';
    }
    
    /**
     * Generate print footer HTML
     */
    private static function generatePrintFooter() {
        $user_name = $_SESSION['user_name'] ?? 'System';
        $user_role = $_SESSION['user_role'] ?? 'User';
        
        return '<div class="print-footer">
            <p class="generation-info">
                <strong>Generated on:</strong> ' . date('d/m/Y H:i:s') . ' | 
                <strong>Generated by:</strong> ' . htmlspecialchars($user_name) . ' (' . ucfirst($user_role) . ')
            </p>
            <p class="copyright">Â© ' . date('Y') . ' ' . (self::getSchoolName()) . '. All rights reserved.</p>
        </div>';
    }
    
    /**
     * Get school name from session cache or database
     */
    private static function getSchoolName() {
        global $pdo;
        
        if (isset($_SESSION['school_logo_cache']['school_name'])) {
            return $_SESSION['school_logo_cache']['school_name'];
        }
        
        try {
            $stmt = $pdo->prepare("SELECT school_name FROM school_info WHERE id = 1");
            $stmt->execute();
            $result = $stmt->fetch();
            return $result['school_name'] ?? 'A.S.ACADEMY';
        } catch (Exception $e) {
            return 'A.S.ACADEMY';
        }
    }
    
    /**
     * Validate export parameters
     * 
     * @param string $format
     * @param array $data
     * @return bool
     */
    public static function validateExportParams($format, $data) {
        if (!in_array($format, ['csv', 'pdf'])) {
            return false;
        }
        
        if (!is_array($data) || empty($data)) {
            return false;
        }
        
        return true;
    }
    
    /**
     * Clean filename for safe download
     * 
     * @param string $filename
     * @return string
     */
    public static function sanitizeFilename($filename) {
        $filename = preg_replace('/[^a-zA-Z0-9_-]/', '_', $filename);
        $filename = preg_replace('/_+/', '_', $filename);
        $filename = trim($filename, '_');
        
        return $filename ?: 'export';
    }
}
